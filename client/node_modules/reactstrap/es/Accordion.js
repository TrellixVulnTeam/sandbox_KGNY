import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { mapToCssModules, tagPropType } from './utils';
import { AccordionContext } from './AccordionContext';
var propTypes = {
  tag: tagPropType,
  className: PropTypes.string,
  cssModule: PropTypes.object,
  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func]),
  children: PropTypes.node,
  openId: PropTypes.string.isRequired,
  toggle: PropTypes.func.isRequired
};
var defaultProps = {
  tag: 'div'
};

var Accordion = function Accordion(props) {
  var openId = props.openId,
      toggle = props.toggle,
      className = props.className,
      cssModule = props.cssModule,
      Tag = props.tag,
      innerRef = props.innerRef,
      attributes = _objectWithoutPropertiesLoose(props, ["openId", "toggle", "className", "cssModule", "tag", "innerRef"]);

  var classes = mapToCssModules(classNames(className, 'accordion'), cssModule);
  var accordionContext = useMemo(function () {
    return {
      openId: openId,
      toggle: toggle
    };
  });
  return /*#__PURE__*/React.createElement(AccordionContext.Provider, {
    value: accordionContext
  }, /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {
    className: classes,
    ref: innerRef
  })));
};

Accordion.propTypes = propTypes;
Accordion.defaultProps = defaultProps;
export default Accordion;